#include <string.h>
using namespace std;


int length(char input[]){
    int len=0;
    for(int i=0 ; input[i]!='\0' ; i++){
        len++;
    }
    return len;
}

char getChar(int n){
    return (char) (n+96);
}


void print_all_codes(char input[], int startIndex, char output[]){
    if(input[startIndex]=='\0'){
        cout<<output<<endl;
        return;
    }
    int lastDigit=input[startIndex]-'0';
    char smallOutput1[1000];
    int i;
    for(i=0 ; output[i]!='\0' ; i++){
        smallOutput1[i]=output[i];
    }
    smallOutput1[i]=getChar(lastDigit);
    smallOutput1[i+1]='\0';
    print_all_codes(input, startIndex+1 , smallOutput1);
    
    if(input[startIndex+1]!='\0'){
        int lastTwoDigits= (input[startIndex]-'0')*10 + (input[startIndex+1]-'0');
        if(lastTwoDigits>=10 && lastTwoDigits<=26){
            char smallOutput2[1000];
            for(i=0 ; output[i]!='\0' ; i++){
                smallOutput2[i]=output[i];
            }
            smallOutput2[i]=getChar(lastTwoDigits);
            smallOutput2[i+1]='\0';
            print_all_codes(input,startIndex+2,smallOutput2);
        }
}
    
    return;
}

void printAllPossibleCodes(string input) {
    /*
    Given the input as a string, print all its possible combinations. You do not need to return anything.
    */
  	char input1[1000];
    int i;
    for(i=0 ; i<input.size() ; i++){
        input1[i]=input[i];
    }
    input1[i]='\0';
    char output[1000];
    output[0]='\0';
    print_all_codes(input1,0,output);
    return;
}
